name: Import existing AWS resources
description: "Importa condicionalmente recursos AWS j√° existentes para o Terraform state."

inputs:
  aws_access_key_id:
    description: AWS Access Key ID
    required: true
  aws_secret_access_key:
    description: AWS Secret Access Key
    required: true
  aws_region:
    description: Regi√£o da AWS
    required: true
  project_name:
    description: Nome do projeto
    required: true
  environment:
    description: "Nome do ambiente (ex: dev, prod)"
    required: true

runs:
  using: composite
  steps:
    # -------------------------------
    # üîÑ IMPORT EXISTING RESOURCES
    # -------------------------------    
    - name: Importar recursos existentes
      shell: bash
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION: ${{ inputs.aws_region }}
        PROJECT_NAME: ${{ inputs.project_name }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        set -e

        # Definir nomes com base no ambiente
        if [ "$ENVIRONMENT" = "prod" ]; then
          LAMBDA_NAME="${PROJECT_NAME}"
          ENV_SUFFIX=""
        else
          LAMBDA_NAME="${PROJECT_NAME}-${ENVIRONMENT}"
          ENV_SUFFIX="-${ENVIRONMENT}"
        fi

        QUEUE_NAME="${LAMBDA_NAME}-queue"
        ROLE_NAME="${PROJECT_NAME}${ENV_SUFFIX}_execution_role"
        LOG_GROUP_NAME="/aws/lambda/${LAMBDA_NAME}"

        set +e

        echo "üîç Verificando SQS '$QUEUE_NAME'..."
        if QUEUE_URL=$(aws sqs get-queue-url --queue-name "$QUEUE_NAME" --region "$AWS_REGION" --query 'QueueUrl' --output text 2>/dev/null); then
          if terraform import aws_sqs_queue.my_queue "$QUEUE_URL"; then
            echo "üü¢ SQS importada com sucesso."
          else
            echo "‚ö†Ô∏è Falha ao importar a SQS."
            exit 1
          fi
        else
          echo "üõ†Ô∏è SQS '$QUEUE_NAME' n√£o encontrada. Terraform ir√° cri√°-la."
        fi

        echo "üü¢ Bucket S3 tratado como data source."

        echo "üîç Verificando IAM Role '$ROLE_NAME'..."
        if aws iam get-role --role-name "$ROLE_NAME" --region "$AWS_REGION" &>/dev/null; then
          if terraform import aws_iam_role.lambda_execution_role "$ROLE_NAME"; then
            echo "üü¢ IAM Role importada com sucesso."
          else
            echo "‚ö†Ô∏è Falha ao importar a IAM Role."
            exit 1
          fi
        else
          echo "üõ†Ô∏è IAM Role n√£o encontrada. Terraform ir√° cri√°-la."
        fi

        echo "üîç Verificando Log Group '$LOG_GROUP_NAME'..."
        if aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP_NAME" --region "$AWS_REGION" | grep "$LOG_GROUP_NAME" &>/dev/null; then
          if terraform state list | grep aws_cloudwatch_log_group.lambda_log_group >/dev/null; then
            echo "‚ÑπÔ∏è Log Group j√° no state do Terraform."
          else
            if terraform import aws_cloudwatch_log_group.lambda_log_group "$LOG_GROUP_NAME"; then
              echo "üü¢ Log Group importado com sucesso."
            else
              echo "‚ö†Ô∏è Falha ao importar o Log Group."
              exit 1
            fi
          fi
        else
          echo "üõ†Ô∏è Log Group n√£o encontrado. Terraform ir√° cri√°-lo."
        fi

        echo "üîç Verificando Lambda '$LAMBDA_NAME'..."
        if aws lambda get-function --function-name "$LAMBDA_NAME" --region "$AWS_REGION" &>/dev/null; then
          if terraform import aws_lambda_function.my_lambda_function "$LAMBDA_NAME"; then
            echo "üü¢ Lambda importada com sucesso."
          else
            echo "‚ö†Ô∏è Falha ao importar a Lambda."
            exit 1
          fi
        else
          echo "üõ†Ô∏è Lambda '$LAMBDA_NAME' n√£o encontrada. Terraform ir√° cri√°-la."
        fi
 