name: Dynamic Lambda Deployment

on:
  pull_request:
    branches:
      - main
      - develop
      - feature/**
      - hotfix/**

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1

    steps:
      # -------------------------------
      # üßæ CHECKOUT & NODE SETUP
      # -------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # -------------------------------
      # ‚öôÔ∏è SETUP ENVIRONMENT
      # -------------------------------
      - name: Setup Environment Variables
        run: |
          echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
      
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          elif [[ "${{ github.base_ref }}" == "develop" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=preview" >> $GITHUB_ENV
          fi

      # -------------------------------
      # üì¶ DEPENDENCIES & BUILD
      # -------------------------------
      - name: Install dependencies
        run: npm install

      - name: Build TypeScript
        run: npm run build

      # -------------------------------
      # üìÅ PACKAGE LAMBDA FUNCTION
      # -------------------------------
      - name: Create Lambda ZIP with node_modules
        run: |
          mkdir -p lambda-package
          cp -r dist/* lambda-package/
          cp -r node_modules lambda-package/
          cp package.json lambda-package/
          cd lambda-package
          zip -r ../${{ env.PROJECT_NAME }}.zip .

      # -------------------------------
      # ‚òÅÔ∏è UPLOAD PACKAGE TO S3
      # -------------------------------
      - name: Extrair nome do bucket S3 das env vars
        run: |
          echo '${{ secrets.GLOBAL_ENV_VARS_JSON }}' > global_env_vars.json
          BUCKET_NAME=$(jq -r '.S3_BUCKET_NAME' global_env_vars.json)
          echo "S3_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
      
      - name: Debug S3 Bucket Name
        run: |
          echo "Usando bucket: $S3_BUCKET_NAME"
        
      - name: Upload Lambda ZIP to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp ${{ env.PROJECT_NAME }}.zip s3://${{ env.S3_BUCKET_NAME }}/${{ env.PROJECT_NAME }}.zip
      
      # -------------------------------
      # üõ†Ô∏è SETUP TERRAFORM
      # -------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6
      # -------------------------------
      # üì¶ TERRAFORM INIT & WORKSPACE
      # -------------------------------
      - name: Terraform Init
        run: |
          terraform init
          terraform workspace list | grep "${{ env.ENVIRONMENT }}" || terraform workspace new ${{ env.ENVIRONMENT }}
          terraform workspace select ${{ env.ENVIRONMENT }}

        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # -------------------------------
      # üßæ GENERATE TFVARS FROM SECRETS
      # -------------------------------
      - name: Extrair secrets e gerar arquivos tfvars
        run: |
          echo '${{ secrets.GLOBAL_ENV_VARS_JSON }}' > terraform/global-env-vars.auto.tfvars.json
          echo '${{ secrets.ENVIRONMENTS }}' > terraform/environments.auto.tfvars.json      

      - name: Verificar acesso ao S3
        run: aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Debug ENV
        run: |
          echo "PROJECT_NAME=${{ env.PROJECT_NAME }}"
          echo "S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }}"
          echo "ENVIRONMENT=${{ env.ENVIRONMENT }}"
    
      - name: Check AWS CLI setup
        run: |
          aws sts get-caller-identity
          aws s3 ls
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # -------------------------------
      # üîÑ IMPORT EXISTING RESOURCES
      # -------------------------------
      - name: Import existing AWS resources
        run: |
          set -e
      
          export AWS_REGION="${{ env.AWS_REGION }}"
          export PROJECT_NAME="${{ env.PROJECT_NAME }}"
          export ENVIRONMENT="${{ env.ENVIRONMENT }}"
      
          # Definir sufixo com base no environment
          if [ "$ENVIRONMENT" = "prod" ]; then
            export LAMBDA_NAME="${PROJECT_NAME}"
            export ENV_SUFFIX=""
          else
            export LAMBDA_NAME="${PROJECT_NAME}-${ENVIRONMENT}"
            export ENV_SUFFIX="-${ENVIRONMENT}"
          fi
      
          export QUEUE_NAME="${LAMBDA_NAME}-queue"
          export ROLE_NAME="${PROJECT_NAME}${ENV_SUFFIX}_execution_role"
          export LOG_GROUP_NAME="/aws/lambda/${LAMBDA_NAME}"
      
          echo "üîç Verificando exist√™ncia da fila SQS '$QUEUE_NAME'..."
          set +e
      
          QUEUE_URL=""
          QUEUE_STATUS=1
      
          if QUEUE_URL=$(aws sqs get-queue-url --queue-name "$QUEUE_NAME" --region "$AWS_REGION" --query 'QueueUrl' --output text 2>/dev/null); then
            QUEUE_STATUS=0
          else
            echo "‚ö†Ô∏è  aws sqs get-queue-url retornou erro. Fila provavelmente n√£o existe."
          fi
      
          echo "Queue Status: $QUEUE_STATUS"
          echo "Queue URL: $QUEUE_URL"
      
          if [ "$QUEUE_STATUS" -eq 0 ] && [[ "$QUEUE_URL" == https* ]]; then
            echo "‚úÖ Fila SQS encontrada. Importando para Terraform..."
            terraform import aws_sqs_queue.my_queue "$QUEUE_URL" || echo "‚ö†Ô∏è  Falha no terraform import da SQS. Seguindo com o pipeline."
          else
            echo "‚ÑπÔ∏è Fila SQS n√£o encontrada. Terraform ir√° cri√°-la no apply."
          fi
      
          set -e
      
          echo "‚úÖ Bucket S3 √© tratado como data source, n√£o requer import."
      
          echo "üîç Verificando exist√™ncia da IAM Role '$ROLE_NAME'..."
          if aws iam get-role --role-name "$ROLE_NAME" --region "$AWS_REGION" &>/dev/null; then
            echo "‚úÖ IAM Role encontrada. Tentando importar para o Terraform..."
            if terraform import aws_iam_role.lambda_execution_role "$ROLE_NAME"; then
              echo "‚úÖ Importa√ß√£o da IAM Role conclu√≠da com sucesso." 
            else
              echo "‚ö†Ô∏è  Falha ao importar a IAM Role. Isso causar√° erro no terraform apply."
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è IAM Role '$ROLE_NAME' n√£o existe. Terraform ir√° cri√°-la."
          fi
      
          echo "üîç Verificando exist√™ncia do CloudWatch Log Group '$LOG_GROUP_NAME'..."
          if aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP_NAME" --region "$AWS_REGION" | grep "$LOG_GROUP_NAME" &>/dev/null; then
            echo "‚úÖ Log Group encontrado. Verificando se j√° est√° no state do Terraform..."
            if terraform state list | grep aws_cloudwatch_log_group.lambda_log_group >/dev/null; then
              echo "‚ÑπÔ∏è Log Group j√° est√° no state do Terraform. Importa√ß√£o n√£o √© necess√°ria."
            else
              echo "‚û°Ô∏è Importando Log Group..."
              if terraform import aws_cloudwatch_log_group.lambda_log_group "$LOG_GROUP_NAME"; then
                echo "‚úÖ Importa√ß√£o do Log Group conclu√≠da com sucesso."
              else
                echo "‚ö†Ô∏è  Falha ao importar o Log Group. Isso causar√° erro no terraform apply."
                exit 1
              fi
            fi
          else
            echo "‚ùå Log Group '$LOG_GROUP_NAME' n√£o encontrado. Terraform ir√° cri√°-lo no apply."
          fi
      
          echo "üîç Verificando exist√™ncia da fun√ß√£o Lambda '$LAMBDA_NAME'..."
          if aws lambda get-function --function-name "$LAMBDA_NAME" --region "$AWS_REGION" &>/dev/null; then
            echo "‚úÖ Fun√ß√£o Lambda encontrada. Importando..."
            terraform import aws_lambda_function.my_lambda_function "$LAMBDA_NAME"
          else
            echo "‚ùå Fun√ß√£o Lambda '$LAMBDA_NAME' n√£o encontrada. Terraform ir√° cri√°-la no apply."
          fi
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        working-directory: terraform
      

      # -------------------------------
      # üîç VALIDA√á√ÉO DO TERRAFORM
      # Garante que a configura√ß√£o est√° sintaticamente correta
      # antes de prosseguir com o plano de execu√ß√£o.
      # -------------------------------
      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform
        
      # -------------------------------
      # üß™ TERRAFORM PLAN & APPLY
      # -------------------------------
      - name: Terraform Plan
        run: terraform plan -input=false -var "environment=${{ env.ENVIRONMENT }}"
        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var "environment=${{ env.ENVIRONMENT }}"
        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_s3_bucket_name: ${{ env.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
