name: Dynamic Lambda Deployment

on:
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1

    steps:
      # -------------------------------
      # üßæ CHECKOUT & NODE SETUP
      # -------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # -------------------------------
      # üì¶ DEPENDENCIES & BUILD
      # -------------------------------
      - name: Install dependencies
        run: npm install

      - name: Build TypeScript
        run: npm run build

      # -------------------------------
      # ‚öôÔ∏è SETUP ENVIRONMENT
      # -------------------------------
      - name: Setup Environment Variables
        run: echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      # -------------------------------
      # üìÅ PACKAGE LAMBDA FUNCTION
      # -------------------------------
      - name: Create Lambda ZIP with node_modules
        run: |
          mkdir -p lambda-package
          cp -r dist/* lambda-package/
          cp -r node_modules lambda-package/
          cp package.json lambda-package/
          cd lambda-package
          zip -r ../${{ env.PROJECT_NAME }}.zip .

      # -------------------------------
      # ‚òÅÔ∏è UPLOAD PACKAGE TO S3
      # -------------------------------
      - name: Upload Lambda ZIP to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp ${{ env.PROJECT_NAME }}.zip s3://meu-unico-bucket-s3/${{ env.PROJECT_NAME }}.zip

      # -------------------------------
      # üõ†Ô∏è SETUP TERRAFORM
      # -------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      # -------------------------------
      # üßæ GENERATE TFVARS FROM SECRETS
      # -------------------------------
      - name: Create environment JSON file for Terraform
        run: |
          printf '{"lambda_env_vars": %s}\n' '${{ secrets.LAMBDA_ENV_VARS_JSON }}' > terraform/lambda-env-vars.auto.tfvars.json

      # -------------------------------
      # üîÑ IMPORT EXISTING RESOURCES
      # -------------------------------
      - name: Import existing AWS resources
        run: |
          export QUEUE_NAME="${{ env.PROJECT_NAME }}-queue"
          export AWS_REGION="${{ env.AWS_REGION }}"
          QUEUE_URL=$(aws sqs get-queue-url --queue-name "$QUEUE_NAME" --region "$AWS_REGION" --query 'QueueUrl' --output text 2>/dev/null)
          if [ -n "$QUEUE_URL" ]; then
            echo "Importando a fila SQS existente: $QUEUE_URL"
            terraform import aws_sqs_queue.my_queue "$QUEUE_URL"
          else
            echo "Fila '$QUEUE_NAME' n√£o encontrada na regi√£o '$AWS_REGION'."
          fi

          terraform import aws_s3_bucket.lambda_code_bucket meu-unico-bucket-s3 || echo "Bucket j√° gerenciado"
          terraform import aws_iam_role.lambda_execution_role ${{ env.PROJECT_NAME }}_execution_role || echo "Role j√° gerenciada"
          terraform import aws_cloudwatch_log_group.lambda_log_group "/aws/lambda/${{ env.PROJECT_NAME }}" || echo "Log group j√° gerenciado"
          terraform import aws_lambda_function.my_lambda_function ${{ env.PROJECT_NAME }}
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        working-directory: terraform

      # -------------------------------
      # üß™ TERRAFORM PLAN & APPLY
      # -------------------------------
      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
